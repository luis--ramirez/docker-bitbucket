define("bitbucket/internal/page/commit/commit","aui aui/flag jquery lodash bitbucket/util/navbuilder bitbucket/internal/feature/comments bitbucket/internal/feature/commit/tree-and-diff-view bitbucket/internal/feature/discussion/participants-list bitbucket/internal/feature/watch bitbucket/internal/layout/page-scrolling-manager bitbucket/internal/model/commit-range bitbucket/internal/model/page-state bitbucket/internal/model/participant bitbucket/internal/model/participant-collection bitbucket/internal/model/revision bitbucket/internal/model/stash-user bitbucket/internal/util/events bitbucket/internal/util/history exports".split(" "),
function(q,I,d,z,l,A,B,r,m,J,C,c,t,K,u,v,h,L,w){function x(a){n.each(function(){var b=d(this),c=b.find("a").attr("data-id")===a.getId();b.toggleClass("selected",c);c&&D.text(b.find(".commitid").text())})}function E(a){f=Object.prototype.hasOwnProperty.call(k,a)?k[a]:e[0];x(f)}function F(a){return l.parse(window.location.href).getQueryParamValue("to")||a.length&&a[0].getId()||"ROOT"}function M(){var a=F(e);a&&a!==f.getId()&&(h.stop(),E(a),B.updateCommitRange(new C({untilRevision:g,sinceRevision:f})))}
function N(){h.on("bitbucket.internal.widget.keyboard-shortcuts.register-contexts",function(a){a.enableContext("commit");a.enableContext("diff-tree");a.enableContext("diff-view")});h.on("bitbucket.internal.keyboard.shortcuts.requestReturnToCommits",function(a){(this.execute?this:q.whenIType(a)).execute(function(){window.location.href=d("#repository-nav-commits").attr("href")})})}function O(){var a=c.getCommit(),a=l.rest().currentRepo().commit(a.getId()).watch().build(),b=d(".watch a"),e=new m(b,a,
m.type.COMMIT);c.getCommitParticipants().on("add",function(a){var b=c.getCurrentUser();b&&b.getName()===a.getUser().getName()&&e.setIsWatching(!0)})}function P(a){h.on("bitbucket.internal.feature.comments.commentAdded",function(b){b=new v(b.author);b.getEmailAddress()===c.getCommit().getAuthor().emailAddress||a.findByUser(b)||a.add(new t({user:b}))});new r(a,d(".participants-dropdown ul"),d(".participants.plugin-item"))}var g,e,k,f,D,n;w.onReady=function(a,b,m,r,t,v,G,p,w,x){p=new K(z.reject(p,function(a){return a.user.emailAddress===
G.author.emailAddress}));c.extend("isWatching");c.extend("commitParticipants");c.setCommitParticipants(p);var H=d.Deferred();_PageDataPlugin.ready("com.atlassian.bitbucket.server.bitbucket-web:iswatching-provider","bitbucket.page.commit",function(a){c.setIsWatching(a.isWatching);H.resolve(a.isWatching)});g=new u(a);c.setRevisionRef(g.getRevisionReference());c.setCommit(g);e=z.map(b,function(a){return new u(a)});k={};if(e.length){b=e.length;var y;for(a=0;a<b;a++)y=e[a],k[y.getId()]=y}else k.ROOT=new u({id:"ROOT"});
d(".aui-page-panel-content").append(bitbucket.internal.feature.treeAndDiffView({}));d(".commit-metadata-details .commit-badge-oneline .commitid").tooltip({title:"data-commitid",className:"commitid-tooltip"});a=d(".commit-metadata-diff-to");n=a.find(".aui-dropdown2 .commit-list-item");D=a.find(".aui-dropdown2-trigger");n.click(function(a){a.preventDefault();a=d(this);var b=a.find("a").attr("data-id");n.removeClass("selected");a.addClass("selected");b!==f.getId()&&(a=l.currentRepo().commit(g.getId()).withParams({to:b}).build(),
L.pushState(null,null,a),d(this).closest(".aui-dropdown2")[0].hide())});h.on("bitbucket.internal.history.changestate",M);J.acceptScrollForwardingRequests();E(F(e));B.init(new C({untilRevision:g,sinceRevision:f}),{maxChanges:m,relevantContextLines:r,numberOfParents:e.length,toolbarWebFragmentLocationPrimary:"bitbucket.commit.diff.toolbar.primary",toolbarWebFragmentLocationSecondary:"bitbucket.commit.diff.toolbar.secondary",commentMode:c.getCurrentUser()?A.commentMode.CREATE_NEW:A.commentMode.NONE,
diffUrlBuilder:function(a){return l.rest().currentRepo().commit(a.commitRange).diff(a)}});N();d(t+" .plugin-section-primary").append(bitbucket.internal.page.commitRelatedEntityWebPanels({repository:v,commit:G,hasRepoWrite:x}));c.getCurrentUser()&&(P(p),H.done(O));w&&I({type:"success",title:q.I18n.getText("bitbucket.web.commit.unwatched.header",c.getCommit().getDisplayId()),close:"auto",body:q.I18n.getText("bitbucket.web.commit.unwatched.content")})}});