define("bitbucket/internal/feature/repository/source-target-selector","jquery lodash bitbucket/util/navbuilder bitbucket/internal/feature/repository/branch-selector bitbucket/internal/feature/repository/related-repository-selector bitbucket/internal/util/ajax bitbucket/internal/util/dom-event bitbucket/internal/util/events".split(" "),function(f,m,l,q,n,r,t,e){function a(k,c,a,e,p){this.init.apply(this,arguments)}a.prototype.defaults={showCommitBadges:!0,showTags:!1};a.prototype.init=function(k,c,
a,g,p){var d=this;d.refSelectors={};d.options=f.extend({},d.defaults,p);c=[{name:"source",repository:c},{name:"target",repository:a}];var l=n.constructDataPageFromPreloadArray(m.chain(c).pluck("repository").union(g).compact().uniq(function(b){return b.getId()}).invoke("toJSON").value());m.each(c,function(b){var h=f("."+b.name+"Branch",k),a=h.next("input"),c=f("."+b.name+"Repo",k),e=c.next("input"),h={$headCommitSpinner:f("\x3cdiv class\x3d'spinner'/\x3e").insertAfter(a),branchSelector:new q(h,{id:b.name+
"BranchDialog",context:b.name,repository:b.repository,field:a,show:{branches:!0,tags:d.options.showTags},paginationContext:"source-target-selector"}),repoSelector:new n(c,{id:b.name+"RepoDialog",context:b.name,repository:b.repository,field:e,preloadData:l}),getBranch:function(){return this.branchSelector.getSelectedItem()},getRepo:function(){return this.repoSelector.getSelectedItem()},getSelection:function(){return{repository:this.getRepo(),branch:this.getBranch()}},setSelection:function(b){b.repository?
this.repoSelector.setSelectedItem(b.repository):this.repoSelector.clearSelection();b.branch?this.branchSelector.setSelectedItem(b.branch):(this.branchSelector.clearSelection(),this._getCommitBadge().empty())},_getCommitBadge:function(){return this.branchSelector.$trigger.siblings(".commit-badge-detailed")}};h._getCommitBadge().find(".commitid").tooltip();d.refSelectors[b.name]=h});k.find(".swap-button").on("click",t.preventDefault(this.swap.bind(this)));e.on("bitbucket.internal.feature.repository.revisionReferenceSelector.revisionRefChanged",
function(b,a){var c=d.refSelectors[a];d.options.showCommitBadges&&d._updateCommitBadge(c,b);"source"===a&&d.refSelectors.target.repoSelector.$trigger.focus();e.trigger("bitbucket.internal.feature.repository.sourceTargetSelector."+a+".revisionRefChanged",d,b)});e.on("bitbucket.internal.feature.repository.repositorySelector.repositoryChanged",function(b,a){var c=d.refSelectors[a];c.branchSelector.setRepository(b);c.branchSelector.$trigger.focus();d.options.showCommitBadges&&d._updateCommitBadge(c,null);
e.trigger("bitbucket.internal.feature.repository.sourceTargetSelector."+a+".repositoryChanged",d,b)});e.on("bitbucket.internal.feature.repository.revisionReferenceSelector.revisionRefUnselected",function(b,a){var c=d.refSelectors[a];d.options.showCommitBadges&&d._updateCommitBadge(c,b);e.trigger("bitbucket.internal.feature.repository.sourceTargetSelector."+a+".revisionRefUnselected",d,b)});return d};a.prototype.swap=function(){var a=this.refSelectors.source,c=this.refSelectors.target,e=a.getSelection();
a.setSelection(c.getSelection());c.setSelection(e)};a.prototype._updateCommitBadge=function(a,c){var e=a._getCommitBadge();e.hide().empty();if(c){a.$headCommitSpinner.show().spin("small");var g=a.getRepo();r.rest({url:l.rest().project(g.getProject()).repo(g).commit(c.getLatestCommit()).build()}).done(function(a){a=f(bitbucket.internal.feature.commit.commitBadge.oneline({commit:a,linkAuthor:!1,messageTooltip:!0,repository:g.toJSON()}));e.append(a);e.fadeIn();e.find(".commitid").tooltip()}).always(function(){a.$headCommitSpinner.spinStop().hide()})}else e.empty()};
a.prototype.branchesSelected=function(){return!(!this.refSelectors.source.getBranch()||!this.refSelectors.target.getBranch())};a.prototype.refsAreEqual=function(){var a=this.refSelectors.source.getBranch(),c=this.refSelectors.target.getBranch();return!(!a||!a.isEqual(c))};a.prototype.getSourceRepository=function(){return this.refSelectors.source.getRepo()};a.prototype.getTargetRepository=function(){return this.refSelectors.target.getRepo()};a.prototype.getSourceBranch=function(){return this.refSelectors.source.getBranch()};
a.prototype.getTargetBranch=function(){return this.refSelectors.target.getBranch()};return a});