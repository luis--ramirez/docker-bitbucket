(function(a){"object"==typeof exports&&"object"==typeof module?a(require("../../lib/codemirror"),require("../htmlmixed/htmlmixed"),require("../../addon/mode/overlay")):"function"==typeof define&&define.amd?define(["../../lib/codemirror","../htmlmixed/htmlmixed","../../addon/mode/overlay"],a):a(CodeMirror)})(function(a){a.defineMode("tornado:inner",function(){function a(b,c){b.eatWhile(/[^\{]/);var d=b.next();if("{"==d&&(d=b.eat(/\{|%|#/)))return c.tokenize=f(d),"tag"}function f(b){"{"==b&&(b="}");
return function(c,d){return c.next()==b&&c.eat("}")?(d.tokenize=a,"tag"):c.match(g)?"keyword":"#"==b?"comment":"string"}}var g="and as assert autoescape block break class comment context continue datetime def del elif else end escape except exec extends false finally for from global if import in include is json_encode lambda length linkify load module none not or pass print put raise raw return self set squeeze super true try url_escape while with without xhtml_escape yield".split(" "),g=new RegExp("^(("+
g.join(")|(")+"))\\b");return{startState:function(){return{tokenize:a}},token:function(a,c){return c.tokenize(a,c)}}});a.defineMode("tornado",function(e){var f=a.getMode(e,"text/html");e=a.getMode(e,"tornado:inner");return a.overlayMode(f,e)});a.defineMIME("text/x-tornado","tornado")});